/**
 * @file Firestore Security Rules
 * @description This ruleset defines the access control for the Firestore database,
 *              allowing users to read public content while restricting write access
 *              based on ownership and authentication.
 *
 * Core Philosophy:
 *   - Emphasizes user-based ownership for write operations.
 *   - Allows public read access to certain collections.
 *   - Uses simple checks based on authenticated user IDs.
 *
 * Data Structure:
 *   - /users/{userId}: Stores public user profiles. Write access is limited to the
 *     authenticated user with a matching userId.
 *   - /questions/{questionId}: Stores questions submitted by users.
 *     Write access is limited to authenticated users.
 *   - /stories/{storyId}: Stores inspirational stories shared by users.
 *     Write access is limited to authenticated users.
 *   - /support_circle_messages/{messageId}: Stores public support chat messages.
 *     Write access is allowed for all authenticated users.
 *   - /events/{eventId}: Stores upcoming community events.
 *     Write access is not defined, defaulting to unauthorized.
 *
 * Key Security Decisions:
 *   - Users can only create/modify their own profiles.
 *   - Read operations are generally public.
 *   - The rules do not enforce any complex data validation, focusing on
 *     authorization.
 *
 * Denormalization for Authorization:
 *   - The rules use the `userId` field in documents to enforce ownership, avoiding
 *     the need for additional `get()` calls.
 *
 * Structural Segregation:
 *   - Data intended to be private (e.g., private user data) is stored separately
 *     from public data (e.g., stories, support messages).
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Controls access to user profile documents.
     * @path /users/{userId}
     * @allow (create) User with uid 'user_abc' can create their profile with matching uid.
     *   request.auth.uid == 'user_abc' && request.resource.data.uid == 'user_abc'
     * @allow (get, list) Any user can read any profile.
     * @allow (update) User with uid 'user_abc' can update their profile with matching uid.
     *   request.auth.uid == 'user_abc' && resource.data.uid == 'user_abc'
     * @allow (delete) User with uid 'user_abc' can delete their profile with matching uid.
     *   request.auth.uid == 'user_abc' && resource.data.uid == 'user_abc'
     * @deny (create) User with uid 'user_xyz' cannot create a profile for 'user_abc'.
     *   request.auth.uid == 'user_xyz' && request.resource.data.uid == 'user_abc'
     * @deny (update) User with uid 'user_xyz' cannot update profile of 'user_abc'.
     *   request.auth.uid == 'user_xyz' && resource.data.uid == 'user_abc'
     * @deny (delete) User with uid 'user_xyz' cannot delete the profile of 'user_abc'.
     *   request.auth.uid == 'user_xyz' && resource.data.uid == 'user_abc'
     * @principle Enforces document ownership for writes and allows public reads.
     */
    match /users/{userId} {
      allow get: if true;
      allow list: if true;
      allow create: if isSignedIn() && request.auth.uid == userId && request.resource.data.uid == userId;
      allow update: if isSignedIn() && request.auth.uid == userId && isExistingOwner(userId) && request.resource.data.uid == resource.data.uid;
      allow delete: if isSignedIn() && request.auth.uid == userId && isExistingOwner(userId);
    }

    /**
     * @description Controls access to questions submitted by users.
     * @path /questions/{questionId}
     * @allow (create) Authenticated user can create a question.
     *   request.auth.uid != null
     * @allow (get, list) Any user can read any question.
     * @deny (update) No one can update a question
     * @deny (delete) No one can delete a question
     * @principle Allows public reads and restricts writes to authenticated users.
     */
    match /questions/{questionId} {
      allow get: if true;
      allow list: if true;
      allow create: if isSignedIn() && request.resource.data.userId == request.auth.uid;
      allow update: if false;
      allow delete: if false;
    }

    /**
     * @description Controls access to inspirational stories shared by users.
     * @path /stories/{storyId}
     * @allow (create) Authenticated user can create a story.
     *   request.auth.uid != null
     * @allow (get, list) Any user can read any story.
     * @deny (update) No one can update a story
     * @deny (delete) No one can delete a story
     * @principle Allows public reads and restricts writes to authenticated users.
     */
    match /stories/{storyId} {
      allow get: if true;
      allow list: if true;
      allow create: if isSignedIn() && request.resource.data.userId == request.auth.uid;
      allow update: if false;
      allow delete: if false;
    }

    /**
     * @description Controls access to messages in the public support circle chat.
     * @path /support_circle_messages/{messageId}
     * @allow (create) Authenticated user can create a message.
     *   request.auth.uid != null
     * @allow (get, list) Any user can read any message.
     * @deny (update) No one can update a message
     * @deny (delete) No one can delete a message
     * @principle Allows public reads and restricts writes to authenticated users.
     */
    match /support_circle_messages/{messageId} {
      allow get: if true;
      allow list: if true;
      allow create: if isSignedIn() && request.resource.data.userId == request.auth.uid;
      allow update: if false;
      allow delete: if false;
    }

    /**
     * @description Controls access to upcoming community events.
     * @path /events/{eventId}
     * @allow (get, list) Any user can read any event.
     * @deny (create) No one can create an event
     * @deny (update) No one can update an event
     * @deny (delete) No one can delete an event
     */
    match /events/{eventId} {
      allow get: if true;
      allow list: if true;
      allow create: if false;
      allow update: if false;
      allow delete: if false;
    }
  }

  // Helper function to determine if the user is signed in
  function isSignedIn() {
    return request.auth != null;
  }

    // Helper function to determine if the user is the owner of the resource, and the resource exists
  function isExistingOwner(userId) {
    return isSignedIn() && request.auth.uid == userId && resource != null;
  }
}