/**
 * @file Firestore Security Rules
 * @description This ruleset implements a combination of user-based ownership and public read access to facilitate a social and supportive platform.
 *
 * Core Philosophy:
 *  - Users have full control over their own profiles and shared stories.
 *  - Public content (stories, support messages, events) is readable by everyone but writable only by authenticated users with the appropriate permissions.
 *
 * Data Structure:
 *  - User profiles are stored under `/users/{userId}` and are private to the user.
 *  - Stories are stored under `/stories/{storyId}` and are publicly readable but owner-writable.
 *  - Support circle messages are stored under `/support_circle_messages/{messageId}` and are publicly readable but owner-writable.
 *  - Events are stored under `/events/{eventId}` and are publicly readable but writable by application admins (currently not implemented).
 *
 * Key Security Decisions:
 *  - Listing of user profiles is disallowed to prevent scraping.
 *  - Stories are publicly listable.
 *  - The 'userId' field is used to enforce ownership for stories.
 *  - Data validation is minimized in this prototyping phase to allow flexible schema changes. Only authorization-critical fields are validated.
 *
 * Denormalization for Authorization:
 *  - Stories contain a `userId` field, enabling direct ownership checks without additional reads.
 *
 * Structural Segregation:
 *  - Public content (stories) and private content (user profiles) are stored in separate top-level collections to optimize read performance and security.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Controls access to user profile documents.
     * @path /users/{userId}
     * @allow (create) User with UID 'user_abc' can create their own profile.
     * @allow (get) User with UID 'user_abc' can read their own profile.
     * @allow (update) User with UID 'user_abc' can update their own profile.
     * @allow (delete) User with UID 'user_abc' can delete their own profile.
     * @deny (create) User with UID 'user_xyz' cannot create a profile with ID 'user_abc'.
     * @principle Enforces document ownership for all operations.
     */
    match /users/{userId} {
      // Check if the user is signed in
      function isSignedIn() {
        return request.auth != null;
      }

      // Check if the requesting user is the owner of the document
      function isOwner(userId) {
        return request.auth.uid == userId;
      }

      // Check if the user is signed in and is the owner of the document
      function isExistingOwner(userId) {
        return isSignedIn() && isOwner(userId) && resource != null;
      }
      allow get: if isOwner(userId);
      allow list: if false; // Prevent listing of all users

      allow create: if isOwner(userId)
                   && request.resource.data.uid == request.auth.uid;

      allow update: if isExistingOwner(userId)
                   && request.resource.data.uid == resource.data.uid; // Enforce immutability of uid

      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Controls access to questions submitted by users.
     * @path /questions/{questionId}
     * @allow (create) User with UID 'user_abc' can create a question with their ID.
     * @allow (get) Any user can read a question.
     * @allow (update) User with UID 'user_abc' can update a question they own.
     * @allow (delete) User with UID 'user_abc' can delete a question they own.
     * @deny (create) User with UID 'user_xyz' cannot create a question with userId 'user_abc'.
     * @principle Enforces document ownership for writes, public read access.
     */
    match /questions/{questionId} {
      // Check if the user is signed in
      function isSignedIn() {
        return request.auth != null;
      }

      // Check if the requesting user is the owner of the document
      function isOwner(userId) {
        return request.auth.uid == userId;
      }

      // Check if the user is signed in and is the owner of the document
      function isExistingOwner(userId) {
        return isSignedIn() && isOwner(userId) && resource != null;
      }

      allow get: if true;
      allow list: if true;

      allow create: if isSignedIn()
                   && request.resource.data.userId == request.auth.uid;

      allow update: if isExistingOwner(resource.data.userId)
                   && request.resource.data.userId == resource.data.userId;

      allow delete: if isExistingOwner(resource.data.userId);
    }

    /**
     * @description Controls access to inspirational stories shared by users.
     * @path /stories/{storyId}
     * @allow (create) User with UID 'user_abc' can create a story with their ID.
     * @allow (get) Any user can read a story.
     * @allow (update) User with UID 'user_abc' can update a story they own.
     * @allow (delete) User with UID 'user_abc' can delete a story they own.
     * @deny (create) User with UID 'user_xyz' cannot create a story with userId 'user_abc'.
     * @principle Enforces document ownership for writes, public read access.
     */
    match /stories/{storyId} {
      // Check if the user is signed in
      function isSignedIn() {
        return request.auth != null;
      }

      // Check if the requesting user is the owner of the document
      function isOwner(userId) {
        return request.auth.uid == userId;
      }

      // Check if the user is signed in and is the owner of the document
      function isExistingOwner(userId) {
        return isSignedIn() && isOwner(userId) && resource != null;
      }

      allow get: if true;
      allow list: if true;

      allow create: if isSignedIn()
                   && request.resource.data.userId == request.auth.uid;

      allow update: if isExistingOwner(resource.data.userId)
                   && request.resource.data.userId == resource.data.userId;

      allow delete: if isExistingOwner(resource.data.userId);
    }

    /**
     * @description Controls access to messages in the public support circle chat.
     * @path /support_circle_messages/{messageId}
     * @allow (create) Any signed-in user can create a message.
     * @allow (get) Any user can read a message.
     * @deny (update) No one can update a message.
     *
     * @principle Public read access, owner-only create, no updates or deletes.
     */
    match /support_circle_messages/{messageId} {
      // Check if the user is signed in
      function isSignedIn() {
        return request.auth != null;
      }
      allow get: if true;
      allow list: if true;
      allow create: if isSignedIn()
                   && request.resource.data.userId == request.auth.uid;
      allow update: if false;
      allow delete: if false;
    }

    /**
     * @description Controls access to upcoming community events.
     * @path /events/{eventId}
     * @allow (get) Any user can read event details.
     * @deny (create) No users can create events (admin-only).
     * @deny (update) No users can update events (admin-only).
     *
     * @principle Public read access, admin-only writes (not yet implemented).
     */
    match /events/{eventId} {
      allow get: if true;
      allow list: if true;
      allow create: if false;
      allow update: if false;
      allow delete: if false;
    }
  }
}