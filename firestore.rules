/**
 * @file Firestore Security Rules
 * @description This ruleset enforces a combination of user-based ownership and public read access.
 *
 * Data Structure:
 * - /users/{userId}: Stores user profile data, accessible only to the owning user.
 * - /questions/{questionId}: Stores questions. Public read, owner-only write.
 * - /stories/{storyId}: Stores stories. Public read, owner-only write.
 * - /support_circle_messages/{messageId}: Stores public chat messages. Public read and write.
 * - /events/{eventId}: Stores event information. Public read-only.
 *
 * Key Security Decisions:
 * - Users can only read/write their own profile data.
 * - Questions can be listed and read by anyone, but only the owner can modify or delete them.
 * - Stories can be listed and read by anyone, but only the owner can modify or delete them.
 * - Support circle messages are publicly accessible.
 * - Events are publicly accessible and read-only.
 *
 * Denormalization for Authorization:
 * - The 'Question', and 'Story' entities require a 'userId' field to determine ownership.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Secure user profiles, allowing only the owning user to read and write their data.
     * @path /users/{userId}
     * @allow (create) User with UID 'user_abc' creates their profile at /users/user_abc.
     * @allow (get) User with UID 'user_abc' reads their profile at /users/user_abc.
     * @deny (create) User with UID 'user_abc' tries to create a profile for /users/user_xyz.
     * @deny (get) User with UID 'user_abc' tries to read profile /users/user_xyz.
     * @principle Enforces user-ownership for all operations.
     */
    match /users/{userId} {
      function isOwner(userId) {
        return request.auth != null && request.auth.uid == userId;
      }

      allow get: if isOwner(userId);
      allow list: if false; // User listing is disabled for privacy.
      allow create: if isOwner(userId);
      allow update: if isOwner(userId);
      allow delete: if isOwner(userId);
    }

    /**
     * @description Secure questions. Allows public read, but only the owner can modify or delete.
     * @path /questions/{questionId}
     * @allow (get) Any user can read a question.
     * @allow (list) Any user can list questions.
     * @allow (create) User with UID 'user_abc' creates a question with userId: 'user_abc'.
     * @allow (update) User with UID 'user_abc' updates a question they own.
     * @deny (create) User with UID 'user_abc' tries to create a question with userId: 'user_xyz'.
     * @deny (update) User with UID 'user_abc' tries to update a question owned by 'user_xyz'.
     * @principle Allows public reads but enforces ownership for writes, validating userId on create.
     */
    match /questions/{questionId} {
      function isOwner(userId) {
        return request.auth != null && request.auth.uid == userId;
      }
      function isExistingOwner(userId) {
        return isOwner(userId) && resource != null;
      }

      allow get: if true;
      allow list: if true;
      allow create: if request.auth != null && request.resource.data.userId == request.auth.uid;
      allow update: if isExistingOwner(resource.data.userId);
      allow delete: if isExistingOwner(resource.data.userId);
    }

    /**
     * @description Secure stories. Allows public read, but only the owner can modify or delete.
     * @path /stories/{storyId}
     * @allow (get) Any user can read a story.
     * @allow (list) Any user can list stories.
     * @allow (create) User with UID 'user_abc' creates a story with userId: 'user_abc'.
     * @allow (update) User with UID 'user_abc' updates a story they own.
     * @deny (create) User with UID 'user_abc' tries to create a story with userId: 'user_xyz'.
     * @deny (update) User with UID 'user_abc' tries to update a story owned by 'user_xyz'.
     * @principle Allows public reads but enforces ownership for writes, validating userId on create.
     */
    match /stories/{storyId} {
      function isOwner(userId) {
        return request.auth != null && request.auth.uid == userId;
      }
      function isExistingOwner(userId) {
        return isOwner(userId) && resource != null;
      }

      allow get: if true;
      allow list: if true;
      allow create: if request.auth != null && request.resource.data.userId == request.auth.uid;
      allow update: if isExistingOwner(resource.data.userId);
      allow delete: if isExistingOwner(resource.data.userId);
    }

    /**
     * @description Allows public read and write access to support circle messages.
     * @path /support_circle_messages/{messageId}
     * @allow (get) Any user can read messages.
     * @allow (list) Any user can list messages.
     * @allow (create) Any authenticated user can create a message.
     * @principle Provides an open forum for public support messages.
     */
    match /support_circle_messages/{messageId} {
      function isSignedIn() {
        return request.auth != null;
      }

      allow get: if true;
      allow list: if true;
      allow create: if isSignedIn();
      allow update: if false;
      allow delete: if false;
    }

    /**
     * @description Allows public read access to event information. Write operations are denied.
     * @path /events/{eventId}
     * @allow (get) Any user can read events.
     * @allow (list) Any user can list events.
     * @deny (create) No one can create events through the client.
     * @principle Provides a public, read-only source of event information.
     */
    match /events/{eventId} {
      allow get: if true;
      allow list: if true;
      allow create: if false;
      allow update: if false;
      allow delete: if false;
    }
  }
}