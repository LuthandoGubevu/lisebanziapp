/**
 * @fileoverview Firestore Security Rules for Prototyping.
 *
 * Core Philosophy:
 * This ruleset prioritizes security and rapid iteration during the prototyping phase.
 * It enforces a strict ownership model for user-specific data and allows public
 * read access where appropriate. Data validation is minimized to facilitate
 * schema evolution.
 *
 * Data Structure:
 * - /users/{userId}: Stores public user profiles, accessible only to the owner.
 * - /questions/{questionId}: Stores questions, publicly readable, writable by the owner only.
 * - /stories/{storyId}: Stores inspirational stories, publicly readable, writable by the owner only.
 * - /support_circle_messages/{messageId}: Stores support circle messages, publicly readable, writable by any signed-in user.
 * - /events/{eventId}: Stores event information, publicly readable. Only admins (not yet implemented) can create, update, or delete events.
 *
 * Key Security Decisions:
 * - User listing is disallowed to prevent information harvesting.
 * - The 'events' collection is publicly readable but write-protected until admin roles are implemented.
 * - All write operations require a verified user identity (request.auth != null).
 *
 * Denormalization for Authorization:
 * - The 'questions' and 'stories' documents include the userId (or authorId) field, which is essential for ownership checks.
 *
 * Structural Segregation:
 * - Public data (stories, support messages, events) and private data (user profiles) are stored in separate top-level collections.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Enforces access control for user profiles.
     * @path /users/{userId}
     * @allow (create) - User with UID 'user123' can create their own profile document.
     * @allow (get, update, delete) - User with UID 'user123' can read, update, and delete their own profile document.
     * @deny (create) - User with UID 'user456' cannot create a profile document for 'user123'.
     * @deny (get, update, delete) - User with UID 'user456' cannot read, update, or delete the profile document of 'user123'.
     * @principle Restricts access to a user's own data tree.
     */
    match /users/{userId} {
      function isOwner(userId) {
        return request.auth.uid == userId;
      }

      function isSignedIn() {
        return request.auth != null;
      }

      allow get: if isOwner(userId);
      allow list: if false; // User listing is disallowed.
      allow create: if isSignedIn() && isOwner(userId) && request.resource.data.uid == userId;
      allow update: if isSignedIn() && isOwner(userId) && resource.data.uid == userId;
      allow delete: if isSignedIn() && isOwner(userId) && resource.data.uid == userId;
    }

    /**
     * @description Controls access to questions submitted by users.
     * @path /questions/{questionId}
     * @allow (get, list) - Any user can read any question.
     * @allow (create) - User with UID 'user123' can create a question with userId 'user123'.
     * @allow (update, delete) - User with UID 'user123' can update or delete their own question.
     * @deny (create) - User with UID 'user456' cannot create a question with userId 'user123'.
     * @deny (update, delete) - User with UID 'user456' cannot update or delete a question created by 'user123'.
     * @principle Enforces document ownership for writes, allows public reads.
     */
    match /questions/{questionId} {
      function isOwner(userId) {
        return request.auth.uid == userId;
      }

      function isSignedIn() {
        return request.auth != null;
      }

      allow get, list: if true;
      allow create: if isSignedIn() && request.resource.data.userId == request.auth.uid;
      allow update: if isSignedIn() && resource.data.userId == request.auth.uid;
      allow delete: if isSignedIn() && resource.data.userId == request.auth.uid;
    }

    /**
     * @description Manages access to inspirational stories shared by users.
     * @path /stories/{storyId}
     * @allow (get, list) - Any user can read any story.
     * @allow (create) - User with UID 'user123' can create a story with userId 'user123'.
     * @allow (update, delete) - User with UID 'user123' can update or delete their own story.
     * @deny (create) - User with UID 'user456' cannot create a story with userId 'user123'.
     * @deny (update, delete) - User with UID 'user456' cannot update or delete a story created by 'user123'.
     * @principle Enforces document ownership for writes, allows public reads.
     */
    match /stories/{storyId} {
      function isOwner(userId) {
        return request.auth.uid == userId;
      }

      function isSignedIn() {
        return request.auth != null;
      }

      allow get, list: if true;
      allow create: if isSignedIn() && request.resource.data.userId == request.auth.uid;
      allow update: if isSignedIn() && resource.data.userId == request.auth.uid;
      allow delete: if isSignedIn() && resource.data.userId == request.auth.uid;
    }

    /**
     * @description Controls access to messages in the public support circle chat.
     * @path /support_circle_messages/{messageId}
     * @allow (get, list) - Any user can read any message.
     * @allow (create) - Any signed-in user can create a message.
     * @deny (update, delete) - No user can update or delete any message (to prevent abuse).
     * @principle Allows public reads and authenticated writes to the support circle.
     */
    match /support_circle_messages/{messageId} {
      function isSignedIn() {
        return request.auth != null;
      }

      allow get, list: if true;
      allow create: if isSignedIn();
      allow update: if false;
      allow delete: if false;
    }

    /**
     * @description Manages access to community event information.
     * @path /events/{eventId}
     * @allow (get, list) - Any user can read any event.
     * @deny (create, update, delete) - No regular user can create, update, or delete events (admin-only).
     * @principle Allows public reads, restricts writes to administrators (not yet implemented).
     */
    match /events/{eventId} {
      allow get, list: if true;
      allow create: if false; // TODO: Add admin role check.
      allow update: if false; // TODO: Add admin role check.
      allow delete: if false; // TODO: Add admin role check.
    }
  }
}